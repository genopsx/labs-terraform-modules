name: Check Terraform Module Versions

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily

  pull_request:
    paths:
      - 'templates/**'
  push:
    paths:
      - 'templates/**'
    branches:
      - main


permissions: 
  id-token: write
  contents: read

env:
  DEBUG: true
  DEPLOY_ACCOUNT: ${{ vars.DEPLOY_ACCOUNT }}
  PROVISIONER_REGION: ${{ vars.PROVISIONER_REGION }}
  DEPLOYMENT_ROLE_NAME: ${{ vars.DEPLOYMENT_ROLE_NAME }}
  S3_BUCKET_NAME: tf-module-s3-ui
  SOURCE_TEFFORM_MODULES_PATH: ./templates
  SOURCE_TERRAFORM_MODULES_S3_UI: ./tf_module_checker_s3_ui
  DEPLOYMENT_ROLE_SESSION_NAME: github-action-tf-module-version-checker-session

jobs:
  check-modules:
    runs-on: ubuntu-latest
    environment: dev

    env:
        ACTIONS_RUNNER_DEBUG: true
        ACTIONS_STEP_DEBUG: true
        TERRAFORM_VERSION: 1.10.5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
         fetch-depth: 0
    
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
         node-version: '20'
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials With OIDC Assume Role
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
           role-to-assume: arn:aws:iam::${{ env.DEPLOY_ACCOUNT }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
           aws-region: ${{ env.PROVISIONER_REGION }}
           role-session-name: ${{ env.DEPLOYMENT_ROLE_SESSION_NAME }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}} 

      - name: Terraform Format Check
        run: terraform fmt -recursive -check
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}}

      - name: Install TFLint
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            curl -sSfL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/bin v0.53.0
            echo "$HOME/bin" >> $GITHUB_PATH
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}}

      - name: Terraform Lint
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            tflint --init
            tflint
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}}

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        if: github.event_name == 'push'
        working-directory: ${{ ENV.SOURCE_TERRAFORM_MODULES_S3_UI}} 

      - name: Get Repository URL
        id: repo_info
        run: echo "REPO_URL=https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Find Terraform Modules
        id: find_modules
        run: |
          echo "Searching for Terraform modules..."
          mkdir -p results
          RESULT_FILE="results/final.json"
      
          echo "[" > "$RESULT_FILE"
      
          FIRST_ENTRY=true
          find "$GITHUB_WORKSPACE/$SOURCE_TERRAFORM_MODULES_PATH" -type f -name "*.tf" | while read -r file; do
            MODULE_SOURCE=$(grep -oP 'source\s*=\s*"\K[^"]+' "$file" | head -n1)
            MODULE_VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' "$file" | head -n1)
      
            if [[ -z "$MODULE_SOURCE" || -z "$MODULE_VERSION" ]]; then
              continue
            fi
      
            REGISTRY_URL="https://registry.terraform.io/v1/modules/$MODULE_SOURCE/versions"
            MODULE_VERSIONS=$(curl -s "$REGISTRY_URL")
      
            # Check if the response is valid JSON
            if [[ -z "$MODULE_VERSIONS" || "$MODULE_VERSIONS" == "null" ]]; then
              echo "Warning: Unable to fetch versions for module $MODULE_SOURCE or empty response"
              continue
            fi
      
            # Parse the versions from the response
            MODULE_VERSIONS=$(echo "$MODULE_VERSIONS" | jq -r '.modules[0].versions[].version' | sort -V)
      
            if [[ -z "$MODULE_VERSIONS" ]]; then
              echo "Warning: No versions found for module $MODULE_SOURCE"
              continue
            fi
      
            LATEST_VERSION=$(echo "$MODULE_VERSIONS" | tail -n 1)
      
            GITHUB_FILE_URL="${REPO_URL}/${file}"
            MODULE_REGISTRY_URL="https://registry.terraform.io/modules/${MODULE_SOURCE}"
      
            CONSTRAINT_SYMBOL=$(echo "$MODULE_VERSION" | grep -o '^[~>=<]*')
            VERSION_NUMBER=$(echo "$MODULE_VERSION" | sed 's/^[~>=<]*//')
      
            STATUS="🔴 ❌ Not Supported"
      
            if [[ -z "$CONSTRAINT_SYMBOL" ]]; then
              STATUS=$([[ "$VERSION_NUMBER" == "$LATEST_VERSION" ]] && echo "🟢 ✅ Up-to-date" || echo "🔴 ❌ Outdated")
            elif [[ "$CONSTRAINT_SYMBOL" == "=" ]]; then
              STATUS=$([[ "$VERSION_NUMBER" == "$LATEST_VERSION" ]] && echo "🟢 ✅ Up-to-date" || echo "🔴 ❌ Not Supported")
            elif [[ "$CONSTRAINT_SYMBOL" == ">" || "$CONSTRAINT_SYMBOL" == ">=" ]]; then
              STATUS="🟡 ✅ Supported"
            elif [[ "$CONSTRAINT_SYMBOL" == "<" || "$CONSTRAINT_SYMBOL" == "<=" ]]; then
              STATUS=$([[ $(echo -e "$VERSION_NUMBER\n$LATEST_VERSION" | sort -V | tail -n1) == "$VERSION_NUMBER" ]] && echo "🔴 ❌ Not Supported" || echo "🟡 ✅ Supported")
            elif [[ "$CONSTRAINT_SYMBOL" == "~>" ]]; then
              MAJOR_MINOR=$(echo "$VERSION_NUMBER" | cut -d'.' -f1,2)
              LATEST_MAJOR_MINOR=$(echo "$LATEST_VERSION" | cut -d'.' -f1,2)
              STATUS=$([[ "$MAJOR_MINOR" == "$LATEST_MAJOR_MINOR" ]] && echo "🟡 ✅ Supported" || echo "🔴 ❌ Not Supported")
            fi
      
            [[ "$FIRST_ENTRY" == false ]] && echo "," >> "$RESULT_FILE"
            FIRST_ENTRY=false
      
            echo "{ \"file\": \"$GITHUB_FILE_URL\", \"module\": \"$MODULE_SOURCE\", \"module_registry\": \"$MODULE_REGISTRY_URL\", \"current_version\": \"$MODULE_VERSION\", \"latest_version\": \"$LATEST_VERSION\", \"status\": \"$STATUS\" }" >> "$RESULT_FILE"
          done
      
          echo "]" >> "$RESULT_FILE"      

      - name: Format JSON Output
        run: |
          echo "[" > results/final.json
          cat results/result.json | sed '$!s/$/,/' >> results/final.json
          echo "]" >> results/final.json

      - name: Upload JSON to S3
        run: |
          aws s3 cp results/final.json s3://$S3_BUCKET_NAME/final.json --acl public-read --region $AWS_REGION
